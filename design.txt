Table formats:

  * The "write-once" table:

    - First column must be TEXT PRIMARY KEY
    - First transaction is INSERT only
    - All subsequent transactions are read-only
    - No UPDATE or DELETE
    - Very fast INSERT
    - Very fast seek to tuple index
    - Very fast seek to key
    - Tuple order: ASCENDING, DESCENDING, RANDOM or HASH
    - Can be atomically replaced by reordered version of self
      (e.g. RANDOM -> ASCENDING) with no locks, thanks to OS support for
      rename()

  * The "flexi" table:

    - No restrictions
    - Worst performance

MVCC:

  * Schema updates:

    - Uses the same data store as everything else, hence can be rolled back etc.

  * "write-once":

    - Since the table itself is not visible to anyone until it's commited, and
      is read-only thereafter, this backend requires no additional support

Building a keyword index:

  1. CREATE TABLE document_summaries_unsorted (document_id TEXT NOT NULL, ctime TIME NOT NULL, summary TEXT NOT NULL);
  2. INSERT INTO document_summaries_unsorted (document_id, ctime, summary) VALUES ($0, $1, $2);
  3. CREATE TABLE document_summaries (document_id TEXT PRIMARY KEY, summary TEXT NOT NULL);
  4. INSERT INTO document_summaries SELECT DISTINCT ON (document_id) document_id, summary FROM document_summaries_unsorted ORDER BY document_id, ctime DESC;
  5. CREATE TABLE document_keywords (document_id TEXT NOT NULL, score FLOAT4 NOT NULL DEFAULT 0, keyword TEXT NOT NULL);
  6. INSERT INTO document_keywords ($0, $1, $2);
  7. CREATE KEYWORD INDEX document_keyword_index ON document_summaries, document_keywords;
